/*
 * Fax.to REST API client for Java
 * This is Fax.to REST API client for Java.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: inquiries@fax.to
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse20016;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse2004;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FaxReceivingApi {
    private ApiClient apiClient;

    public FaxReceivingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FaxReceivingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for areaCodesCountryCodeStateIdGet
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param STATE_ID The numerical identifier for the state (required)
     * @param apiKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call areaCodesCountryCodeStateIdGetCall(Integer COUNTRY_CODE, Integer STATE_ID, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/areacodes/{COUNTRY_CODE}/{STATE_ID}"
            .replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiClient.escapeString(COUNTRY_CODE.toString()))
            .replaceAll("\\{" + "STATE_ID" + "\\}", apiClient.escapeString(STATE_ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call areaCodesCountryCodeStateIdGetValidateBeforeCall(Integer COUNTRY_CODE, Integer STATE_ID, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'COUNTRY_CODE' is set
        if (COUNTRY_CODE == null) {
            throw new ApiException("Missing the required parameter 'COUNTRY_CODE' when calling areaCodesCountryCodeStateIdGet(Async)");
        }
        
        // verify the required parameter 'STATE_ID' is set
        if (STATE_ID == null) {
            throw new ApiException("Missing the required parameter 'STATE_ID' when calling areaCodesCountryCodeStateIdGet(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling areaCodesCountryCodeStateIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = areaCodesCountryCodeStateIdGetCall(COUNTRY_CODE, STATE_ID, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of countries with its area code
     * 
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param STATE_ID The numerical identifier for the state (required)
     * @param apiKey  (required)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20014 areaCodesCountryCodeStateIdGet(Integer COUNTRY_CODE, Integer STATE_ID, String apiKey) throws ApiException {
        ApiResponse<InlineResponse20014> resp = areaCodesCountryCodeStateIdGetWithHttpInfo(COUNTRY_CODE, STATE_ID, apiKey);
        return resp.getData();
    }

    /**
     * This API gets a list of countries with its area code
     * 
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param STATE_ID The numerical identifier for the state (required)
     * @param apiKey  (required)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20014> areaCodesCountryCodeStateIdGetWithHttpInfo(Integer COUNTRY_CODE, Integer STATE_ID, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = areaCodesCountryCodeStateIdGetValidateBeforeCall(COUNTRY_CODE, STATE_ID, apiKey, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of countries with its area code (asynchronously)
     * 
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param STATE_ID The numerical identifier for the state (required)
     * @param apiKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call areaCodesCountryCodeStateIdGetAsync(Integer COUNTRY_CODE, Integer STATE_ID, String apiKey, final ApiCallback<InlineResponse20014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = areaCodesCountryCodeStateIdGetValidateBeforeCall(COUNTRY_CODE, STATE_ID, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for countriesCountryCodeDidGroupsGet
     * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format (required)
     * @param areaCode The area code of the DID group (required)
     * @param apiKey  (required)
     * @param didGroupIds Used to display more information about specific DID groups (optional)
     * @param stateId The numerical identifier for the didGroup&#39;s state (optional)
     * @param cityNamePattern A string pattern for the beginning of city name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call countriesCountryCodeDidGroupsGetCall(Integer COUNTRY_CODE, Integer areaCode, String apiKey, Integer didGroupIds, Integer stateId, Integer cityNamePattern, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/{countryCode}/didgroups"
            .replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiClient.escapeString(COUNTRY_CODE.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (didGroupIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("didGroupIds", didGroupIds));
        if (stateId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stateId", stateId));
        if (cityNamePattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cityNamePattern", cityNamePattern));
        if (areaCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("areaCode", areaCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countriesCountryCodeDidGroupsGetValidateBeforeCall(Integer COUNTRY_CODE, Integer areaCode, String apiKey, Integer didGroupIds, Integer stateId, Integer cityNamePattern, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'COUNTRY_CODE' is set
        if (COUNTRY_CODE == null) {
            throw new ApiException("Missing the required parameter 'COUNTRY_CODE' when calling countriesCountryCodeDidGroupsGet(Async)");
        }
        
        // verify the required parameter 'areaCode' is set
        if (areaCode == null) {
            throw new ApiException("Missing the required parameter 'areaCode' when calling countriesCountryCodeDidGroupsGet(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling countriesCountryCodeDidGroupsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = countriesCountryCodeDidGroupsGetCall(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of DID groups
     * 
     * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format (required)
     * @param areaCode The area code of the DID group (required)
     * @param apiKey  (required)
     * @param didGroupIds Used to display more information about specific DID groups (optional)
     * @param stateId The numerical identifier for the didGroup&#39;s state (optional)
     * @param cityNamePattern A string pattern for the beginning of city name (optional)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20015 countriesCountryCodeDidGroupsGet(Integer COUNTRY_CODE, Integer areaCode, String apiKey, Integer didGroupIds, Integer stateId, Integer cityNamePattern) throws ApiException {
        ApiResponse<InlineResponse20015> resp = countriesCountryCodeDidGroupsGetWithHttpInfo(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern);
        return resp.getData();
    }

    /**
     * This API gets a list of DID groups
     * 
     * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format (required)
     * @param areaCode The area code of the DID group (required)
     * @param apiKey  (required)
     * @param didGroupIds Used to display more information about specific DID groups (optional)
     * @param stateId The numerical identifier for the didGroup&#39;s state (optional)
     * @param cityNamePattern A string pattern for the beginning of city name (optional)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20015> countriesCountryCodeDidGroupsGetWithHttpInfo(Integer COUNTRY_CODE, Integer areaCode, String apiKey, Integer didGroupIds, Integer stateId, Integer cityNamePattern) throws ApiException {
        com.squareup.okhttp.Call call = countriesCountryCodeDidGroupsGetValidateBeforeCall(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of DID groups (asynchronously)
     * 
     * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format (required)
     * @param areaCode The area code of the DID group (required)
     * @param apiKey  (required)
     * @param didGroupIds Used to display more information about specific DID groups (optional)
     * @param stateId The numerical identifier for the didGroup&#39;s state (optional)
     * @param cityNamePattern A string pattern for the beginning of city name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countriesCountryCodeDidGroupsGetAsync(Integer COUNTRY_CODE, Integer areaCode, String apiKey, Integer didGroupIds, Integer stateId, Integer cityNamePattern, final ApiCallback<InlineResponse20015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countriesCountryCodeDidGroupsGetValidateBeforeCall(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for countriesGet
     * @param apiKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call countriesGetCall(String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countriesGetValidateBeforeCall(String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling countriesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = countriesGetCall(apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of countries available in the Fax.to coverage
     * 
     * @param apiKey  (required)
     * @return InlineResponse20012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20012 countriesGet(String apiKey) throws ApiException {
        ApiResponse<InlineResponse20012> resp = countriesGetWithHttpInfo(apiKey);
        return resp.getData();
    }

    /**
     * This API gets a list of countries available in the Fax.to coverage
     * 
     * @param apiKey  (required)
     * @return ApiResponse&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20012> countriesGetWithHttpInfo(String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = countriesGetValidateBeforeCall(apiKey, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of countries available in the Fax.to coverage (asynchronously)
     * 
     * @param apiKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countriesGetAsync(String apiKey, final ApiCallback<InlineResponse20012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countriesGetValidateBeforeCall(apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incomingFaxesGet
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incomingFaxesGetCall(String apiKey, String limit, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/incoming-faxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incomingFaxesGetValidateBeforeCall(String apiKey, String limit, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling incomingFaxesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = incomingFaxesGetCall(apiKey, limit, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of incoming faxes
     * 
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 incomingFaxesGet(String apiKey, String limit, String page) throws ApiException {
        ApiResponse<InlineResponse2004> resp = incomingFaxesGetWithHttpInfo(apiKey, limit, page);
        return resp.getData();
    }

    /**
     * This API gets a list of incoming faxes
     * 
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> incomingFaxesGetWithHttpInfo(String apiKey, String limit, String page) throws ApiException {
        com.squareup.okhttp.Call call = incomingFaxesGetValidateBeforeCall(apiKey, limit, page, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of incoming faxes (asynchronously)
     * 
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incomingFaxesGetAsync(String apiKey, String limit, String page, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incomingFaxesGetValidateBeforeCall(apiKey, limit, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incomingFaxesRecipientGet
     * @param recipient The recipient&#39;s fax number (required)
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incomingFaxesRecipientGetCall(Integer recipient, String apiKey, String limit, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/incoming-faxes/{recipient}"
            .replaceAll("\\{" + "recipient" + "\\}", apiClient.escapeString(recipient.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incomingFaxesRecipientGetValidateBeforeCall(Integer recipient, String apiKey, String limit, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recipient' is set
        if (recipient == null) {
            throw new ApiException("Missing the required parameter 'recipient' when calling incomingFaxesRecipientGet(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling incomingFaxesRecipientGet(Async)");
        }
        

        com.squareup.okhttp.Call call = incomingFaxesRecipientGetCall(recipient, apiKey, limit, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of incoming faxes for a specific recipient
     * 
     * @param recipient The recipient&#39;s fax number (required)
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 incomingFaxesRecipientGet(Integer recipient, String apiKey, String limit, String page) throws ApiException {
        ApiResponse<InlineResponse2004> resp = incomingFaxesRecipientGetWithHttpInfo(recipient, apiKey, limit, page);
        return resp.getData();
    }

    /**
     * This API gets a list of incoming faxes for a specific recipient
     * 
     * @param recipient The recipient&#39;s fax number (required)
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> incomingFaxesRecipientGetWithHttpInfo(Integer recipient, String apiKey, String limit, String page) throws ApiException {
        com.squareup.okhttp.Call call = incomingFaxesRecipientGetValidateBeforeCall(recipient, apiKey, limit, page, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of incoming faxes for a specific recipient (asynchronously)
     * 
     * @param recipient The recipient&#39;s fax number (required)
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incomingFaxesRecipientGetAsync(Integer recipient, String apiKey, String limit, String page, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incomingFaxesRecipientGetValidateBeforeCall(recipient, apiKey, limit, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for numbersGet
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call numbersGetCall(String apiKey, String limit, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call numbersGetValidateBeforeCall(String apiKey, String limit, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling numbersGet(Async)");
        }
        

        com.squareup.okhttp.Call call = numbersGetCall(apiKey, limit, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of numbers to get the current configuration of one or multiple number
     * 
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @return InlineResponse20017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20017 numbersGet(String apiKey, String limit, String page) throws ApiException {
        ApiResponse<InlineResponse20017> resp = numbersGetWithHttpInfo(apiKey, limit, page);
        return resp.getData();
    }

    /**
     * This API gets a list of numbers to get the current configuration of one or multiple number
     * 
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @return ApiResponse&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20017> numbersGetWithHttpInfo(String apiKey, String limit, String page) throws ApiException {
        com.squareup.okhttp.Call call = numbersGetValidateBeforeCall(apiKey, limit, page, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of numbers to get the current configuration of one or multiple number (asynchronously)
     * 
     * @param apiKey  (required)
     * @param limit The number of record to return (optional)
     * @param page The page you want to get (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call numbersGetAsync(String apiKey, String limit, String page, final ApiCallback<InlineResponse20017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = numbersGetValidateBeforeCall(apiKey, limit, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for provisionNumbersGet
     * @param didGroupId The id of the did group (required)
     * @param apiKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call provisionNumbersGetCall(Integer didGroupId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/didgroups/{did_group_id}/provision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (didGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("did_group_id", didGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call provisionNumbersGetValidateBeforeCall(Integer didGroupId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'didGroupId' is set
        if (didGroupId == null) {
            throw new ApiException("Missing the required parameter 'didGroupId' when calling provisionNumbersGet(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling provisionNumbersGet(Async)");
        }
        

        com.squareup.okhttp.Call call = provisionNumbersGetCall(didGroupId, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of provisioned numbers
     * 
     * @param didGroupId The id of the did group (required)
     * @param apiKey  (required)
     * @return InlineResponse20016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20016 provisionNumbersGet(Integer didGroupId, String apiKey) throws ApiException {
        ApiResponse<InlineResponse20016> resp = provisionNumbersGetWithHttpInfo(didGroupId, apiKey);
        return resp.getData();
    }

    /**
     * This API gets a list of provisioned numbers
     * 
     * @param didGroupId The id of the did group (required)
     * @param apiKey  (required)
     * @return ApiResponse&lt;InlineResponse20016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20016> provisionNumbersGetWithHttpInfo(Integer didGroupId, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = provisionNumbersGetValidateBeforeCall(didGroupId, apiKey, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of provisioned numbers (asynchronously)
     * 
     * @param didGroupId The id of the did group (required)
     * @param apiKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call provisionNumbersGetAsync(Integer didGroupId, String apiKey, final ApiCallback<InlineResponse20016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = provisionNumbersGetValidateBeforeCall(didGroupId, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statesCountryCodeGet
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param apiKey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statesCountryCodeGetCall(Integer COUNTRY_CODE, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/states/{COUNTRY_CODE}"
            .replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiClient.escapeString(COUNTRY_CODE.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiKey != null)
        localVarHeaderParams.put("api_key", apiClient.parameterToString(apiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statesCountryCodeGetValidateBeforeCall(Integer COUNTRY_CODE, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'COUNTRY_CODE' is set
        if (COUNTRY_CODE == null) {
            throw new ApiException("Missing the required parameter 'COUNTRY_CODE' when calling statesCountryCodeGet(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling statesCountryCodeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = statesCountryCodeGetCall(COUNTRY_CODE, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This API gets a list of states of a given country available in the Fax.to coverage
     * 
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param apiKey  (required)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20013 statesCountryCodeGet(Integer COUNTRY_CODE, String apiKey) throws ApiException {
        ApiResponse<InlineResponse20013> resp = statesCountryCodeGetWithHttpInfo(COUNTRY_CODE, apiKey);
        return resp.getData();
    }

    /**
     * This API gets a list of states of a given country available in the Fax.to coverage
     * 
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param apiKey  (required)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20013> statesCountryCodeGetWithHttpInfo(Integer COUNTRY_CODE, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = statesCountryCodeGetValidateBeforeCall(COUNTRY_CODE, apiKey, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API gets a list of states of a given country available in the Fax.to coverage (asynchronously)
     * 
     * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format (required)
     * @param apiKey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statesCountryCodeGetAsync(Integer COUNTRY_CODE, String apiKey, final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statesCountryCodeGetValidateBeforeCall(COUNTRY_CODE, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
